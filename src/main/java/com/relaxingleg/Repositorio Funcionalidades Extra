## DAR un mensaje de OnReady Bot ##

@Override
    public void onReady(@NotNull ReadyEvent event) {

            JDA jda =event.getJDA();
            for (Guild guild : jda.getGuilds()) {

                for(TextChannel channel : guild.getTextChannels()) {

                    channel.sendMessage("Prueba 2 antes de commit and push").queue();;
                }

        }

    }


## DAR RESPUESTA DE LO MISMO DETECTADO EN LA ULTIMA LINEA ##

@Override
    public void onMessageReceived(@NotNull MessageReceivedEvent event) {
        if (event.getAuthor().isBot()) return;  //Evitamos que el bot se auto responda
        MessageChannel channel = event.getChannel();
        channel.sendMessage(event.getMessage().getContentRaw()).queue();


    }


    ## SLASH COMMANDS ##

    Como subar dos numeros a partir de un comnado

    @Override
        public void onReady(@NotNull  ReadyEvent event) {
            Guild guild = event.getJDA().getGuildById(1282507250539171840L);
            guild.upsertCommand("sum","gives the sum of two numbers").queue();


        }








    }




 @Override
     public void execute(SlashCommandInteractionEvent event) {
         Member member = event.getMember();
         assert member != null;
         GuildVoiceState memberVoiceState = member.getVoiceState();

         if(!memberVoiceState.inAudioChannel()){
             event.reply("Tienes que estar dentro de un canal de Voz").queue();
             return;
         }

         Member self = event.getGuild().getSelfMember();
         GuildVoiceState selfVoiceState = self.getVoiceState();

         if(!selfVoiceState.inAudioChannel()){
             event.getGuild().getAudioManager().openAudioConnection(memberVoiceState.getChannel());

         }else {

             if(selfVoiceState.getChannel() != memberVoiceState.getChannel()){
                 event.reply("Debes estar en el mismo canal").queue();
                 return;


             }
         }

         PlayerManager playerManager = PlayerManager.get();
         PlayerManager.play(event.getGuild(), event.getOption("name").getAsString());


     }







     CONEXION CON LA API PARA UNA CONSULTA UNICA

     private static final String UR_BASE = "https://dolarapi.com/";

             try {
                 URL url = new URL ("https://dolarapi.com/v1/dolares/blue");

                 HttpURLConnection connection = (HttpURLConnection) url.openConnection();

                 connection.setRequestMethod("GET");

                 int codigoRespuesta = connection.getResponseCode();

                 if(codigoRespuesta == 200){

                     BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                     StringBuilder respuesta = new StringBuilder();
                     String line; //Leer linea por linea

                     while((line = reader.readLine()) != null){
                         respuesta.append(line);
                     }

                     System.out.println("Respuesta obtenida de la API: "+ respuesta.toString());

                     connection.disconnect();

                 }else{
                     throw new RuntimeException("Error al obtener la info de la API: " + codigoRespuesta);

                 }


             } catch (Exception e) {
                 throw new RuntimeException(e);
             }




              // Llamada al endpoint /productos
                         HttpRequest requestProductos = HttpRequest.newBuilder()
                                 .uri(URI.create(BASE_URL + "productos"))
                                 .GET()
                                 .build();
                         HttpResponse<String> responseProductos = client.send(requestProductos, HttpResponse.BodyHandlers.ofString());
                         if (responseProductos.statusCode() == 200) {
                             Object productos = objectMapper.readValue(responseProductos.body(), new TypeReference<>() {});
                             System.out.println("Productos: " + productos);
                         }

                         // Llamada al endpoint /pedidos
                         HttpRequest requestPedidos = HttpRequest.newBuilder()
                                 .uri(URI.create(BASE_URL + "pedidos"))
                                 .GET()
                                 .build();
                         HttpResponse<String> responsePedidos = client.send(requestPedidos, HttpResponse.BodyHandlers.ofString());
                         if (responsePedidos.statusCode() == 200) {
                             Object pedidos = objectMapper.readValue(responsePedidos.body(), new TypeReference<>() {});
                             System.out.println("Pedidos: " + pedidos);
                         }